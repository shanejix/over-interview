{"./":{"url":"./","title":"Introduction","keywords":"","body":"有效回答 有效回答是指：用两三句话对问题作出概括性回答，并引导面试官对回答中提到的关键词进一步深入提问 面试时间总是有限的围绕一道普通技术题目的时长一般在 1-3 分钟，一轮技术面试的时长一般控制在 30-60 分钟，面试题目通常涉及不同知识面 问题的回答一般是自顶向下的以一个[概括性较强的回答进行反馈]，面试官获得反馈后，通常会基于候选人回答中提到的[关键点]或面试官认为的其他关键点展开进一步提问 学习知识点时通常尽可能查看具有权威性的文档、规范、源码等，进行从零到一的较全面的理解，耗时较长；而复习时更多的需要有侧重点，应当进行[**提炼和总结**]。 候选人通常基于知识点去查找相关技术文章，希望从其他开发者的技术文章中获取“精华”，从而省去自己从零学习或是提炼总结的成本.通过由浅入深的组织方式，以 「相关问题」 「回答关键点」 「知识点深入」 「参考资料」 为内容基础大纲进行梳理:「回答关键点」作为高度概括的总结性语言，可用于第一时间回答面试官的问题；「知识点深入」以递进方式深入解析，可作为引导面试官进一步提问的方向。 Copyright © shanejix 2022 all right reserved，powered by Gitbookupdate_at: 2022-02-25 10:07:34 "},"0-零、面试相关/":{"url":"0-零、面试相关/","title":"0-零、面试相关","keywords":"","body":"零，面试相关 Copyright © shanejix 2022 all right reserved，powered by Gitbookupdate_at: 2022-02-25 10:07:34 "},"0-零、面试相关/个人介绍🔥🔥🔥🔥🔥.html":{"url":"0-零、面试相关/个人介绍🔥🔥🔥🔥🔥.html","title":"个人介绍🔥🔥🔥🔥🔥","keywords":"","body":"个人介绍 🔥🔥🔥🔥🔥 非常重要 最突出的技能 JS 的多维运用 哪方面的知识掌握是最全面的 前端工程化 性格上最大的优势 对技术的热情和对问题孜孜不倦的深挖实践 最擅长的事情 擅长从工作中分析总结，制定对某类问题的解决方法，编写效率工具 哪些成就和贡献 Github xx 项目核心贡献者 范例 面试官，你好，我叫 xx，毕业于 xx 大学 xx 专业，三年工作经验。在前一个公司主要负责 xx 平台官网的前端开发、基础设施的建设和通用打包脚本编写这些，也担任过物料平台开发的主要工作，负责项目搭建、架构优化等。 自己比较擅长从日常工作中分析总结，制定对某类问题的解决方法，编写效率工具。 在技术方面比较熟悉 React 开发，对 Node 也有涉猎，平时会更新技术博客和 Github 并且为大型开源项目提过 pr Copyright © shanejix 2022 all right reserved，powered by Gitbookupdate_at: 2022-02-25 10:07:34 "},"0-零、面试相关/面试阶段🔥🔥.html":{"url":"0-零、面试相关/面试阶段🔥🔥.html","title":"面试阶段🔥🔥","keywords":"","body":"面试阶段 🔥🔥 一面 基础知识扎实，针对简历上点发问 -（30%） 二面 根据个人项目由浅到深，挖掘技术难点 - （30%） 升入原理 - （10%） 算法 - （5%） 三面 项目难点，亮点 场景题 逻辑思维，技术积累，应变能力 HR 面 Copyright © shanejix 2022 all right reserved，powered by Gitbookupdate_at: 2022-02-25 10:07:34 "},"1-壹、HTML-相关/":{"url":"1-壹、HTML-相关/","title":"1-壹、HTML-相关","keywords":"","body":"壹、HTML 相关 Copyright © shanejix 2022 all right reserved，powered by Gitbookupdate_at: 2022-02-25 10:07:34 "},"2-贰、CSS-相关/":{"url":"2-贰、CSS-相关/","title":"2-贰、CSS-相关","keywords":"","body":"贰、CSS 相关 Copyright © shanejix 2022 all right reserved，powered by Gitbookupdate_at: 2022-02-25 10:07:34 "},"3-叁、JavaScript-相关/":{"url":"3-叁、JavaScript-相关/","title":"3-叁、JavaScript-相关","keywords":"","body":"叁、JavaScript 相关 Copyright © shanejix 2022 all right reserved，powered by Gitbookupdate_at: 2022-02-25 10:07:34 "},"4-肆、Browser-相关/":{"url":"4-肆、Browser-相关/","title":"4-肆、Browser-相关","keywords":"","body":"肆、Browser 相关 Copyright © shanejix 2022 all right reserved，powered by Gitbookupdate_at: 2022-02-25 10:07:34 "},"4-肆、Browser-相关/浏览器跨域🔥🔥🔥🔥🔥.html":{"url":"4-肆、Browser-相关/浏览器跨域🔥🔥🔥🔥🔥.html","title":"浏览器跨域🔥🔥🔥🔥🔥","keywords":"","body":"浏览器跨域 🔥🔥🔥🔥🔥 「相关问题」 什么是跨域 为什么会跨域 为什么有跨域限制 怎么解决跨域 「回答关键点」 同源策略 CORS 反向代理 JSONP 同源策略(same-origin policy)是浏览器的为了请求安全而做的限制,协议(protocol)+主机(host)+端口(port)不一致则为跨域,后端不受此限制,可以通过 CORS 等方式解决跨域 「知识点深入」 CORS (Cross-Origin Resource Sharing) 只需要后端支持 在响应头中添加 Access-Control-Allow-* 具体实现 简单请求（Simple Requests） 不会触发预检请求称为简单请求 满足条件: 请求方法:HEAD,GET,POST 请求头 - Accept - Accept-Language - Content-Language - Content-Type(仅支持以下3种) application/x-www-form-urlencoded、 multipart/form-data、 text/plain 需预检请求（Preflighted requests） 不满简单请求的条件时，浏览器会自动向服务端发送一个 OPTIONS 请求， 通过服务端返回的 Access-Control-Allow-* 判定请求是否被允许 Access-Control-Allow-* 开头 Access-Control-Allow-Origin // 表示允许的来源 Access-Control-Allow-Methods // 表示允许的请求方法 Access-Control-Allow-Headers // 表示允许的请求头 Access-Control-Allow-Credentials // 表示允许携带认证信息 当请求符合响应头的这些条件时，浏览器才会发送并响应正式的请求 反向代理 只需要后端支持 依赖同源的服务端对请求做一个转发处理，将跨域请求转换成同源请求 具体实现 在页面同域下配置一套反向代理服务，页面请求同域的服务端，服务端请求上游的实际的服务端，之后将结果返回给前端 JSONP 需要服务端和前端配合实现 利用了浏览器加载 JavaScript 资源文件时不受同源策略的限制而实现跨域获取数据 实现方式 浏览器全局注册一个函数 window.getMember = (num) => console.log(\"Member: \" + num); 构造一个请求 URL，并将函数名放入参数中 https://xxx.org/api/Member?callback=getHZFEMember 生成一个 并把 src 设为上一步的请求 URL 并插入到文档中 服务端构造一个 JavaScript 函数调用表达式并返回， getMember(17); // 浏览器加载并执行以上代码,输出 Member: 17 postMessage 即在两个 origin 下分别部署一套页面 A 与 B，A 页面通过 iframe 加载 B 页面并监听消息，B 页面发送消息 window.name 主要是利用 window.name 页面跳转不改变的特性实现跨域，即 iframe 加载一个跨域页面，设置 window.name，跳转到同域页面，可以通过 $('iframe').contentWindow.name 拿到跨域页面的数据 document.domain 可将相同一级域名下的子域名页面的 document.domain 设置为一级域名实现跨域;可将同域不同端口的 document.domain 设置为同域名实现跨域（端口被置为 null） 「扩展」 LocalStorage / SessionStorage 跨域 ​ LocalStorage 和 SessionStorage 同样受到同源策略的限制而跨域读写的方式也可以使用前文提到的 postMessage 跨域与监控 ​ 前端项目在统计前端报错监控时会遇到上报的内容只有 Script Error 的问题。这个问题也是由同源策略引起； 在 标签上添加 crossorigin=\"anonymous\" 并且返回的 JS 文件响应头加上 Access-Control-Allow-Origin: \\* 即可捕捉到完整的错误堆栈 跨域与图片 前端项目在图片处理时可能会遇到图片绘制到 Canvas 上之后却不能读取像素或导出 base64 的问题。这个问题也是由同源策略引起。 解决方式和上文相同，给图片添加 crossorigin=\"anonymous\" 并在返回的图片文件响应头加上 Access-Control-Allow-Origin: * 即可解决 「参考资料」 https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy Copyright © shanejix 2022 all right reserved，powered by Gitbookupdate_at: 2022-02-25 10:07:34 "},"5-伍、前端工程化/":{"url":"5-伍、前端工程化/","title":"5-伍、前端工程化","keywords":"","body":"伍、前端工程化 Copyright © shanejix 2022 all right reserved，powered by Gitbookupdate_at: 2022-02-25 10:07:34 "},"5-伍、前端工程化/Webpack工作原理🔥🔥🔥🔥🔥.html":{"url":"5-伍、前端工程化/Webpack工作原理🔥🔥🔥🔥🔥.html","title":"Webpack工作原理🔥🔥🔥🔥🔥","keywords":"","body":"Webpack 工作原理 🔥🔥🔥🔥🔥 「相关问题」 webpack 工作流程 webpack 工作流程是怎样的 webpack 在不同阶段做了什么事情 「回答关键点」 模块(化) 打包 webpack 是一种模块打包工具,可以将各类资源(js,css,图片,字体等-一切皆可打包)转译组合为 JS 格式 的 bundle 文件 核心任务 完成内容转化和资源合并,可以分为以下三大阶段:初始化阶段,编译阶段输出阶段 初始化阶段 读取与合并配置参数 加载 Plugin 实例化 Compiler 编译阶段 从 Entry 发出，针对每个 Module 串行调用对应的 Loader 去翻译文件内容 再找到该 Module 依赖的 Module，递归地进行编译处理 输出阶段 对编译后的 Module 组合成 Chunk 把 Chunk 转换成文件，输出到文件系统 「知识点深入」 「参考资料」 Copyright © shanejix 2022 all right reserved，powered by Gitbookupdate_at: 2022-02-25 10:07:34 "},"INTRO.html":{"url":"INTRO.html","title":"INTRO","keywords":"","body":"Node version nvm istall v10.23.1 GitBook can be installed from NPM using: $ npm install gitbook-cli -g GitBook can be installed plugins from NPM using: $ gitbook install Create the directories and files for a book from its SUMMARY.md file (if existing) using $ gitbook init You can serve a repository as a book using: $ gitbook serve Or simply build the static website using: $ gitbook build Copyright © shanejix 2022 all right reserved，powered by Gitbookupdate_at: 2022-02-25 10:07:34 "}}